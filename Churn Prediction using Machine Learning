{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.6","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":1368540,"sourceType":"datasetVersion","datasetId":797699}],"dockerImageVersionId":30028,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/thebishop123/churn-prediction-using-machine-learning?scriptVersionId=193797100\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"## Churn Prediction \n### A Machine Learning Model That Can Predict Customers Who Will Leave The Company\n\nThe aim is to predict whether a bank's customers leave the bank or not. If the Client has closed his/her bank account, he/she has left.\n\n## Dataset\n\n- **RowNumber:** corresponds to the record (row) number and has no effect on the output.\n- **CustomerId:** contains random values and has no effect on customer leaving the bank.\n- **Surname:** the surname of a customer has no impact on their decision to leave the bank.\n- **CreditScore:** can have an effect on customer churn, since a customer with a higher credit score is less likely to leave the bank.\n- **Geography:** a customer’s location can affect their decision to leave the bank.\n- **Gender:** it’s interesting to explore whether gender plays a role in a customer leaving the bank.\n- **Age:** this is certainly relevant, since older customers are less likely to leave their bank than younger ones.\n- **Tenure:** refers to the number of years that the customer has been a client of the bank. Normally, older clients are more loyal and less likely to leave a bank.\n- **Balance:** also a very good indicator of customer churn, as people with a higher balance in their accounts are less likely to leave the bank compared to those with lower balances.\n- **NumOfProducts:** refers to the number of products that a customer has purchased through the bank.\n- **HasCrCard:** denotes whether or not a customer has a credit card. This column is also relevant, since people with a credit card are less likely to leave the bank.\n- **IsActiveMember:** active customers are less likely to leave the bank.\n- **EstimatedSalary:** as with balance, people with lower salaries are more likely to leave the bank compared to those with higher salaries.\n- **Exited:** whether or not the customer left the bank.  (0=No,1=Yes)\n\n\n\n### The model created as a result of LightGBM hyperparameter optimization (0.867300)","metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0"}},{"cell_type":"code","source":"# loading necessary libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import pyplot\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import confusion_matrix, classification_report, f1_score, precision_score, recall_score, roc_auc_score, roc_curve\nfrom sklearn.linear_model import LogisticRegression  \nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.svm import SVC\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.tree import DecisionTreeClassifier \nfrom sklearn.ensemble import RandomForestClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import accuracy_score,recall_score\nfrom xgboost import XGBClassifier\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score, GridSearchCV\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning) \nwarnings.filterwarnings(\"ignore\", category=FutureWarning) \nwarnings.filterwarnings(\"ignore\", category=UserWarning) \n\n%config InlineBackend.figure_format = 'retina'\n\n# to display all columns and rows:\npd.set_option('display.max_columns', None); pd.set_option('display.max_rows', None);","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.701356Z","iopub.execute_input":"2024-08-23T23:34:44.701843Z","iopub.status.idle":"2024-08-23T23:34:44.738791Z","shell.execute_reply.started":"2024-08-23T23:34:44.701803Z","shell.execute_reply":"2024-08-23T23:34:44.737259Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# reading the data\ndf = pd.read_csv(\"../input/churn-for-bank-customers/churn.csv\", index_col=0)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.741794Z","iopub.execute_input":"2024-08-23T23:34:44.742341Z","iopub.status.idle":"2024-08-23T23:34:44.7924Z","shell.execute_reply.started":"2024-08-23T23:34:44.742295Z","shell.execute_reply":"2024-08-23T23:34:44.790808Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 1- EDA","metadata":{"trusted":true}},{"cell_type":"code","source":"# The first 5 observation \ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.795848Z","iopub.execute_input":"2024-08-23T23:34:44.796372Z","iopub.status.idle":"2024-08-23T23:34:44.82134Z","shell.execute_reply.started":"2024-08-23T23:34:44.796325Z","shell.execute_reply":"2024-08-23T23:34:44.819616Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# The size of the data set \ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.824625Z","iopub.execute_input":"2024-08-23T23:34:44.825334Z","iopub.status.idle":"2024-08-23T23:34:44.835629Z","shell.execute_reply.started":"2024-08-23T23:34:44.82527Z","shell.execute_reply":"2024-08-23T23:34:44.83383Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Feature information\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.838012Z","iopub.execute_input":"2024-08-23T23:34:44.838733Z","iopub.status.idle":"2024-08-23T23:34:44.862954Z","shell.execute_reply.started":"2024-08-23T23:34:44.83864Z","shell.execute_reply":"2024-08-23T23:34:44.861436Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Descriptive statistics of the data set\ndf.describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.865202Z","iopub.execute_input":"2024-08-23T23:34:44.865594Z","iopub.status.idle":"2024-08-23T23:34:44.929947Z","shell.execute_reply.started":"2024-08-23T23:34:44.865556Z","shell.execute_reply":"2024-08-23T23:34:44.928436Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# categorical Variables\ncategorical_variables = [col for col in df.columns if col in \"O\"\n                        or df[col].nunique() <=11\n                        and col not in \"Exited\"]\n\ncategorical_variables","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.931761Z","iopub.execute_input":"2024-08-23T23:34:44.932213Z","iopub.status.idle":"2024-08-23T23:34:44.952688Z","shell.execute_reply.started":"2024-08-23T23:34:44.932175Z","shell.execute_reply":"2024-08-23T23:34:44.951397Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Numeric Variables\nnumeric_variables = [col for col in df.columns if df[col].dtype != \"object\"\n                        and df[col].nunique() >11\n                        and col not in \"CustomerId\"]\nnumeric_variables","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.95687Z","iopub.execute_input":"2024-08-23T23:34:44.957258Z","iopub.status.idle":"2024-08-23T23:34:44.971727Z","shell.execute_reply.started":"2024-08-23T23:34:44.957223Z","shell.execute_reply":"2024-08-23T23:34:44.969842Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Exited (Dependent Variable)","metadata":{}},{"cell_type":"code","source":"# Frequency of classes of dependent variable\ndf[\"Exited\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.975258Z","iopub.execute_input":"2024-08-23T23:34:44.97592Z","iopub.status.idle":"2024-08-23T23:34:44.990767Z","shell.execute_reply.started":"2024-08-23T23:34:44.975844Z","shell.execute_reply":"2024-08-23T23:34:44.989265Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Customers leaving the bank\nchurn = df.loc[df[\"Exited\"]==1]","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:44.99282Z","iopub.execute_input":"2024-08-23T23:34:44.993379Z","iopub.status.idle":"2024-08-23T23:34:45.006733Z","shell.execute_reply.started":"2024-08-23T23:34:44.993332Z","shell.execute_reply":"2024-08-23T23:34:45.004597Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Customers who did not leave the bank\nnot_churn = df.loc[df[\"Exited\"]==0]","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.009401Z","iopub.execute_input":"2024-08-23T23:34:45.010002Z","iopub.status.idle":"2024-08-23T23:34:45.024464Z","shell.execute_reply.started":"2024-08-23T23:34:45.009911Z","shell.execute_reply":"2024-08-23T23:34:45.022742Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Categorical Variables","metadata":{}},{"cell_type":"markdown","source":"## Tenure","metadata":{}},{"cell_type":"code","source":"# Frequency of not_churn group according to Tenure\nnot_churn[\"Tenure\"].value_counts().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.026624Z","iopub.execute_input":"2024-08-23T23:34:45.027207Z","iopub.status.idle":"2024-08-23T23:34:45.04321Z","shell.execute_reply.started":"2024-08-23T23:34:45.027136Z","shell.execute_reply":"2024-08-23T23:34:45.041631Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Frequency of churn group according to Tenure\nchurn[\"Tenure\"].value_counts().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.045019Z","iopub.execute_input":"2024-08-23T23:34:45.045399Z","iopub.status.idle":"2024-08-23T23:34:45.062719Z","shell.execute_reply.started":"2024-08-23T23:34:45.045361Z","shell.execute_reply":"2024-08-23T23:34:45.060602Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## NumOfProducts","metadata":{}},{"cell_type":"code","source":"# Frequency of not_churn group according to NumOfProducts\nnot_churn[\"NumOfProducts\"].value_counts().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.064552Z","iopub.execute_input":"2024-08-23T23:34:45.06502Z","iopub.status.idle":"2024-08-23T23:34:45.078504Z","shell.execute_reply.started":"2024-08-23T23:34:45.064976Z","shell.execute_reply":"2024-08-23T23:34:45.077085Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Frequency of churn group according to NumOfProducts\nchurn[\"NumOfProducts\"].value_counts().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.080796Z","iopub.execute_input":"2024-08-23T23:34:45.081293Z","iopub.status.idle":"2024-08-23T23:34:45.101389Z","shell.execute_reply.started":"2024-08-23T23:34:45.081241Z","shell.execute_reply":"2024-08-23T23:34:45.099612Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## HasCrCard","metadata":{}},{"cell_type":"code","source":"# examining the HasCrCard of the not_churn group\nnot_churn[\"HasCrCard\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.103424Z","iopub.execute_input":"2024-08-23T23:34:45.104007Z","iopub.status.idle":"2024-08-23T23:34:45.122641Z","shell.execute_reply.started":"2024-08-23T23:34:45.103952Z","shell.execute_reply":"2024-08-23T23:34:45.121081Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# examining the HasCrCard of the churn group\nchurn[\"HasCrCard\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.124469Z","iopub.execute_input":"2024-08-23T23:34:45.125094Z","iopub.status.idle":"2024-08-23T23:34:45.142019Z","shell.execute_reply.started":"2024-08-23T23:34:45.124997Z","shell.execute_reply":"2024-08-23T23:34:45.140113Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## IsActiveMember","metadata":{}},{"cell_type":"code","source":"# examining the IsActiveMember of the not_churn group\nnot_churn[\"IsActiveMember\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.144497Z","iopub.execute_input":"2024-08-23T23:34:45.145104Z","iopub.status.idle":"2024-08-23T23:34:45.161339Z","shell.execute_reply.started":"2024-08-23T23:34:45.145045Z","shell.execute_reply":"2024-08-23T23:34:45.159584Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# examining the IsActiveMember of the churn group\nchurn[\"IsActiveMember\"].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.163643Z","iopub.execute_input":"2024-08-23T23:34:45.164236Z","iopub.status.idle":"2024-08-23T23:34:45.181965Z","shell.execute_reply.started":"2024-08-23T23:34:45.164192Z","shell.execute_reply":"2024-08-23T23:34:45.180452Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Geography","metadata":{}},{"cell_type":"code","source":"# Frequency of not_churn group according to Geography\nnot_churn.Geography.value_counts().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.187424Z","iopub.execute_input":"2024-08-23T23:34:45.188072Z","iopub.status.idle":"2024-08-23T23:34:45.204954Z","shell.execute_reply.started":"2024-08-23T23:34:45.187948Z","shell.execute_reply":"2024-08-23T23:34:45.203353Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Frequency of churn group according to Geography\nchurn.Geography.value_counts().sort_values()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.208317Z","iopub.execute_input":"2024-08-23T23:34:45.208846Z","iopub.status.idle":"2024-08-23T23:34:45.223878Z","shell.execute_reply.started":"2024-08-23T23:34:45.208783Z","shell.execute_reply":"2024-08-23T23:34:45.222248Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Gender","metadata":{}},{"cell_type":"code","source":"# Frequency of not_churn group according to Gender\nnot_churn.Gender.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.226102Z","iopub.execute_input":"2024-08-23T23:34:45.226718Z","iopub.status.idle":"2024-08-23T23:34:45.253926Z","shell.execute_reply.started":"2024-08-23T23:34:45.226609Z","shell.execute_reply":"2024-08-23T23:34:45.252195Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Frequency of churn group according to Gender\nchurn.Gender.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.256061Z","iopub.execute_input":"2024-08-23T23:34:45.256589Z","iopub.status.idle":"2024-08-23T23:34:45.275336Z","shell.execute_reply.started":"2024-08-23T23:34:45.256531Z","shell.execute_reply":"2024-08-23T23:34:45.273334Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Numerical Variables","metadata":{}},{"cell_type":"markdown","source":"## CreditScore","metadata":{}},{"cell_type":"code","source":"# Let's examine the credit score of the not_churn group\nnot_churn[\"CreditScore\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.276933Z","iopub.execute_input":"2024-08-23T23:34:45.277341Z","iopub.status.idle":"2024-08-23T23:34:45.30344Z","shell.execute_reply.started":"2024-08-23T23:34:45.277301Z","shell.execute_reply":"2024-08-23T23:34:45.301762Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Credit Score for not_churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('CreditScore')\npyplot.hist(not_churn[\"CreditScore\"],bins=15, alpha=0.7, label='Not Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.30559Z","iopub.execute_input":"2024-08-23T23:34:45.306168Z","iopub.status.idle":"2024-08-23T23:34:45.626849Z","shell.execute_reply.started":"2024-08-23T23:34:45.306109Z","shell.execute_reply":"2024-08-23T23:34:45.625357Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Let's examine the credit score of the churn group\nchurn[\"CreditScore\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.62869Z","iopub.execute_input":"2024-08-23T23:34:45.629163Z","iopub.status.idle":"2024-08-23T23:34:45.64481Z","shell.execute_reply.started":"2024-08-23T23:34:45.629099Z","shell.execute_reply":"2024-08-23T23:34:45.643208Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Credit Score for churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('CreditScore')\npyplot.hist(churn[\"CreditScore\"],bins=15, alpha=0.8, label='Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.64736Z","iopub.execute_input":"2024-08-23T23:34:45.647903Z","iopub.status.idle":"2024-08-23T23:34:45.947309Z","shell.execute_reply.started":"2024-08-23T23:34:45.647844Z","shell.execute_reply":"2024-08-23T23:34:45.945451Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.catplot(\"Exited\", \"CreditScore\", data = df)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:45.949593Z","iopub.execute_input":"2024-08-23T23:34:45.950094Z","iopub.status.idle":"2024-08-23T23:34:46.439082Z","shell.execute_reply.started":"2024-08-23T23:34:45.950049Z","shell.execute_reply":"2024-08-23T23:34:46.437243Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Age","metadata":{}},{"cell_type":"code","source":"# examining the age of the not_churn group\nnot_churn[\"Age\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:46.441936Z","iopub.execute_input":"2024-08-23T23:34:46.44245Z","iopub.status.idle":"2024-08-23T23:34:46.462722Z","shell.execute_reply.started":"2024-08-23T23:34:46.442397Z","shell.execute_reply":"2024-08-23T23:34:46.460946Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Age for not_churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('Age')\npyplot.hist(not_churn[\"Age\"],bins=15, alpha=0.7, label='Not Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:46.465708Z","iopub.execute_input":"2024-08-23T23:34:46.466117Z","iopub.status.idle":"2024-08-23T23:34:46.775315Z","shell.execute_reply.started":"2024-08-23T23:34:46.466077Z","shell.execute_reply":"2024-08-23T23:34:46.773908Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# examine the age of the churn group\nchurn[\"Age\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:46.77708Z","iopub.execute_input":"2024-08-23T23:34:46.777496Z","iopub.status.idle":"2024-08-23T23:34:46.793218Z","shell.execute_reply.started":"2024-08-23T23:34:46.777455Z","shell.execute_reply":"2024-08-23T23:34:46.791737Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Age for not_churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('Age')\npyplot.hist(churn[\"Age\"],bins=15, alpha=0.7, label='Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:46.795701Z","iopub.execute_input":"2024-08-23T23:34:46.796336Z","iopub.status.idle":"2024-08-23T23:34:47.111852Z","shell.execute_reply.started":"2024-08-23T23:34:46.796288Z","shell.execute_reply":"2024-08-23T23:34:47.110257Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.catplot(\"Exited\", \"Age\", data = df)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:47.113784Z","iopub.execute_input":"2024-08-23T23:34:47.114197Z","iopub.status.idle":"2024-08-23T23:34:47.572376Z","shell.execute_reply.started":"2024-08-23T23:34:47.114157Z","shell.execute_reply":"2024-08-23T23:34:47.570406Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Balance","metadata":{}},{"cell_type":"code","source":"# examining the Balance of the not_churn group\nnot_churn[\"Balance\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:47.574638Z","iopub.execute_input":"2024-08-23T23:34:47.575148Z","iopub.status.idle":"2024-08-23T23:34:47.591964Z","shell.execute_reply.started":"2024-08-23T23:34:47.575107Z","shell.execute_reply":"2024-08-23T23:34:47.590527Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Balance for not_churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('Balance')\npyplot.hist(not_churn[\"Balance\"],bins=15, alpha=0.7, label='Not Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:47.594289Z","iopub.execute_input":"2024-08-23T23:34:47.594906Z","iopub.status.idle":"2024-08-23T23:34:47.888087Z","shell.execute_reply.started":"2024-08-23T23:34:47.594854Z","shell.execute_reply":"2024-08-23T23:34:47.886285Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# examining the Balance of the churn group\nchurn[\"Balance\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:47.897698Z","iopub.execute_input":"2024-08-23T23:34:47.898249Z","iopub.status.idle":"2024-08-23T23:34:47.915046Z","shell.execute_reply.started":"2024-08-23T23:34:47.898197Z","shell.execute_reply":"2024-08-23T23:34:47.913131Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Balance for churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('Balance')\npyplot.hist(churn[\"Balance\"],bins=15, alpha=0.7, label='Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:47.917917Z","iopub.execute_input":"2024-08-23T23:34:47.918501Z","iopub.status.idle":"2024-08-23T23:34:48.178193Z","shell.execute_reply.started":"2024-08-23T23:34:47.918443Z","shell.execute_reply":"2024-08-23T23:34:48.176942Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.catplot(\"Exited\", \"Balance\", data = df)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:48.180692Z","iopub.execute_input":"2024-08-23T23:34:48.181255Z","iopub.status.idle":"2024-08-23T23:34:48.647058Z","shell.execute_reply.started":"2024-08-23T23:34:48.181209Z","shell.execute_reply":"2024-08-23T23:34:48.64553Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## EstimatedSalary","metadata":{}},{"cell_type":"code","source":"# examining the EstimatedSalary of the not_churn group\nnot_churn[\"EstimatedSalary\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:48.648903Z","iopub.execute_input":"2024-08-23T23:34:48.649299Z","iopub.status.idle":"2024-08-23T23:34:48.666045Z","shell.execute_reply.started":"2024-08-23T23:34:48.649261Z","shell.execute_reply":"2024-08-23T23:34:48.664698Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the Balance for churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('EstimatedSalary')\npyplot.hist(not_churn[\"EstimatedSalary\"],bins=15, alpha=0.7, label='Not Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:48.667912Z","iopub.execute_input":"2024-08-23T23:34:48.66833Z","iopub.status.idle":"2024-08-23T23:34:48.978885Z","shell.execute_reply.started":"2024-08-23T23:34:48.668279Z","shell.execute_reply":"2024-08-23T23:34:48.977592Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# examining the EstimatedSalary of the churn group\nchurn[\"EstimatedSalary\"].describe([0.05,0.25,0.50,0.75,0.90,0.95,0.99])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:48.980521Z","iopub.execute_input":"2024-08-23T23:34:48.980967Z","iopub.status.idle":"2024-08-23T23:34:48.997752Z","shell.execute_reply.started":"2024-08-23T23:34:48.980925Z","shell.execute_reply":"2024-08-23T23:34:48.996236Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# distribution of the EstimatedSalary for churn\npyplot.figure(figsize=(8,6))\npyplot.xlabel('EstimatedSalary')\npyplot.hist(churn[\"EstimatedSalary\"],bins=15, alpha=0.7, label='Churn')\npyplot.legend(loc='upper right')\npyplot.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:48.999345Z","iopub.execute_input":"2024-08-23T23:34:48.999922Z","iopub.status.idle":"2024-08-23T23:34:49.55793Z","shell.execute_reply.started":"2024-08-23T23:34:48.999875Z","shell.execute_reply":"2024-08-23T23:34:49.556631Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.catplot(\"Exited\", \"EstimatedSalary\", data = df)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:49.559556Z","iopub.execute_input":"2024-08-23T23:34:49.55998Z","iopub.status.idle":"2024-08-23T23:34:50.048687Z","shell.execute_reply.started":"2024-08-23T23:34:49.559936Z","shell.execute_reply":"2024-08-23T23:34:50.047083Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Correlation Matrix","metadata":{"trusted":true}},{"cell_type":"code","source":"# Exited correlation matrix\nk = 10 #number of variables for heatmap\ncols = df.corr().nlargest(k, 'Exited')['Exited'].index\ncm = df[cols].corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(cm, annot=True, cmap = 'viridis')","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:50.050949Z","iopub.execute_input":"2024-08-23T23:34:50.051518Z","iopub.status.idle":"2024-08-23T23:34:50.864433Z","shell.execute_reply.started":"2024-08-23T23:34:50.051462Z","shell.execute_reply":"2024-08-23T23:34:50.863242Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 2- Data Preprocessing","metadata":{}},{"cell_type":"markdown","source":"## Missing Value","metadata":{}},{"cell_type":"code","source":"# # Missing Observation Analysis\ndf.isnull().sum()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:50.866339Z","iopub.execute_input":"2024-08-23T23:34:50.866761Z","iopub.status.idle":"2024-08-23T23:34:50.885341Z","shell.execute_reply.started":"2024-08-23T23:34:50.866719Z","shell.execute_reply":"2024-08-23T23:34:50.883881Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Outliers","metadata":{}},{"cell_type":"code","source":"# To determine the threshold value for outliers\ndef outlier_thresholds(dataframe, variable, low_quantile=0.05, up_quantile=0.95):\n    quantile_one = dataframe[variable].quantile(low_quantile)\n    quantile_three = dataframe[variable].quantile(up_quantile)\n    interquantile_range = quantile_three - quantile_one\n    up_limit = quantile_three + 1.5 * interquantile_range\n    low_limit = quantile_one - 1.5 * interquantile_range\n    return low_limit, up_limit","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:50.887417Z","iopub.execute_input":"2024-08-23T23:34:50.88798Z","iopub.status.idle":"2024-08-23T23:34:50.898075Z","shell.execute_reply.started":"2024-08-23T23:34:50.887923Z","shell.execute_reply":"2024-08-23T23:34:50.896669Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Are there any outliers in the variables\ndef has_outliers(dataframe, numeric_columns, plot=False):\n   # variable_names = []\n    for col in numeric_columns:\n        low_limit, up_limit = outlier_thresholds(dataframe, col)\n        if dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].any(axis=None):\n            number_of_outliers = dataframe[(dataframe[col] > up_limit) | (dataframe[col] < low_limit)].shape[0]\n            print(col, \" : \", number_of_outliers, \"outliers\")\n            #variable_names.append(col)\n            if plot:\n                sns.boxplot(x=dataframe[col])\n                plt.show()\n    #return variable_names","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:50.899778Z","iopub.execute_input":"2024-08-23T23:34:50.900161Z","iopub.status.idle":"2024-08-23T23:34:50.915638Z","shell.execute_reply.started":"2024-08-23T23:34:50.900123Z","shell.execute_reply":"2024-08-23T23:34:50.914348Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# There is no outlier\nfor var in numeric_variables:\n    print(var, \"has \" , has_outliers(df, [var]),  \"Outliers\")","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:50.917518Z","iopub.execute_input":"2024-08-23T23:34:50.918057Z","iopub.status.idle":"2024-08-23T23:34:50.958953Z","shell.execute_reply.started":"2024-08-23T23:34:50.917992Z","shell.execute_reply":"2024-08-23T23:34:50.957783Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Feature Engineering","metadata":{}},{"cell_type":"code","source":"# we standardize tenure with age\ndf[\"NewTenure\"] = df[\"Tenure\"]/df[\"Age\"]\ndf[\"NewCreditsScore\"] = pd.qcut(df['CreditScore'], 6, labels = [1, 2, 3, 4, 5, 6])\ndf[\"NewAgeScore\"] = pd.qcut(df['Age'], 8, labels = [1, 2, 3, 4, 5, 6, 7, 8])\ndf[\"NewBalanceScore\"] = pd.qcut(df['Balance'].rank(method=\"first\"), 5, labels = [1, 2, 3, 4, 5])\ndf[\"NewEstSalaryScore\"] = pd.qcut(df['EstimatedSalary'], 10, labels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:50.961054Z","iopub.execute_input":"2024-08-23T23:34:50.961594Z","iopub.status.idle":"2024-08-23T23:34:51.003898Z","shell.execute_reply.started":"2024-08-23T23:34:50.961531Z","shell.execute_reply":"2024-08-23T23:34:51.00233Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.007261Z","iopub.execute_input":"2024-08-23T23:34:51.007732Z","iopub.status.idle":"2024-08-23T23:34:51.041248Z","shell.execute_reply.started":"2024-08-23T23:34:51.007691Z","shell.execute_reply":"2024-08-23T23:34:51.03941Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## One Hot Encoding","metadata":{}},{"cell_type":"code","source":"# Variables to apply one hot encoding\nlist = [\"Gender\", \"Geography\"]\ndf = pd.get_dummies(df, columns =list, drop_first = True)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.043252Z","iopub.execute_input":"2024-08-23T23:34:51.043731Z","iopub.status.idle":"2024-08-23T23:34:51.0659Z","shell.execute_reply.started":"2024-08-23T23:34:51.043677Z","shell.execute_reply":"2024-08-23T23:34:51.064559Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.067943Z","iopub.execute_input":"2024-08-23T23:34:51.068397Z","iopub.status.idle":"2024-08-23T23:34:51.103009Z","shell.execute_reply.started":"2024-08-23T23:34:51.068353Z","shell.execute_reply":"2024-08-23T23:34:51.101337Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Scalling","metadata":{}},{"cell_type":"code","source":"# Removing variables that will not affect the dependent variable\ndf = df.drop([\"CustomerId\",\"Surname\"], axis = 1)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.105574Z","iopub.execute_input":"2024-08-23T23:34:51.10628Z","iopub.status.idle":"2024-08-23T23:34:51.121624Z","shell.execute_reply.started":"2024-08-23T23:34:51.106201Z","shell.execute_reply":"2024-08-23T23:34:51.119885Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Scale features using statistics that are robust to outliers.\ndef robust_scaler(variable):\n    var_median = variable.median()\n    quartile1 = variable.quantile(0.25)\n    quartile3 = variable.quantile(0.75)\n    interquantile_range = quartile3 - quartile1\n    if int(interquantile_range) == 0:\n        quartile1 = variable.quantile(0.05)\n        quartile3 = variable.quantile(0.95)\n        interquantile_range = quartile3 - quartile1\n        if int(interquantile_range) == 0:\n            quartile1 = variable.quantile(0.01)\n            quartile3 = variable.quantile(0.99)\n            interquantile_range = quartile3 - quartile1\n            z = (variable - var_median) / interquantile_range\n            return round(z, 3)\n\n        z = (variable - var_median) / interquantile_range\n        return round(z, 3)\n    else:\n        z = (variable - var_median) / interquantile_range\n    return round(z, 3)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.12416Z","iopub.execute_input":"2024-08-23T23:34:51.124782Z","iopub.status.idle":"2024-08-23T23:34:51.141022Z","shell.execute_reply.started":"2024-08-23T23:34:51.124727Z","shell.execute_reply":"2024-08-23T23:34:51.139711Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"new_cols_ohe = [\"Gender_Male\",\"Geography_Germany\",\"Geography_Spain\"]\nlike_num = [col for col in df.columns if df[col].dtypes != 'O' and len(df[col].value_counts()) <= 10]\ncols_need_scale = [col for col in df.columns if col not in new_cols_ohe\n                   and col not in \"Exited\"\n                   and col not in like_num]\n\nfor col in cols_need_scale:\n    df[col] = robust_scaler(df[col])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.142562Z","iopub.execute_input":"2024-08-23T23:34:51.14305Z","iopub.status.idle":"2024-08-23T23:34:51.21262Z","shell.execute_reply.started":"2024-08-23T23:34:51.142988Z","shell.execute_reply":"2024-08-23T23:34:51.21089Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.214675Z","iopub.execute_input":"2024-08-23T23:34:51.215276Z","iopub.status.idle":"2024-08-23T23:34:51.248982Z","shell.execute_reply.started":"2024-08-23T23:34:51.215222Z","shell.execute_reply":"2024-08-23T23:34:51.247511Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 3- Modeling","metadata":{}},{"cell_type":"code","source":"X = df.drop(\"Exited\",axis=1)\ny = df[\"Exited\"]\n# Train-Test Separation\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=12345)\n# Models for Classification\nmodels = [('LR', LogisticRegression(random_state=123456)),\n          ('KNN', KNeighborsClassifier()),\n          ('CART', DecisionTreeClassifier(random_state=123456)),\n          ('RF', RandomForestClassifier(random_state=123456)),\n          ('SVR', SVC(gamma='auto',random_state=123456)),\n          ('GB', GradientBoostingClassifier(random_state = 12345)),\n          (\"LightGBM\", LGBMClassifier(random_state=123456))]\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=123456)\n    cv_results = cross_val_score(model, X, y, cv=kfold)\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:34:51.251018Z","iopub.execute_input":"2024-08-23T23:34:51.25152Z","iopub.status.idle":"2024-08-23T23:36:03.401802Z","shell.execute_reply.started":"2024-08-23T23:34:51.251474Z","shell.execute_reply":"2024-08-23T23:36:03.400538Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# GB Confusion Matrix\nmodel_GB = GradientBoostingClassifier(random_state=12345)\nmodel_GB.fit(X_train, y_train)\ny_pred = model_GB.predict(X_test)\nconf_mat = confusion_matrix(y_pred,y_test)\nconf_mat","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:03.403752Z","iopub.execute_input":"2024-08-23T23:36:03.40455Z","iopub.status.idle":"2024-08-23T23:36:05.093629Z","shell.execute_reply.started":"2024-08-23T23:36:03.404492Z","shell.execute_reply":"2024-08-23T23:36:05.091814Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(\"True Positive : \", conf_mat[1, 1])\nprint(\"True Negative : \", conf_mat[0, 0])\nprint(\"False Positive: \", conf_mat[0, 1])\nprint(\"False Negative: \", conf_mat[1, 0])","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:05.095317Z","iopub.execute_input":"2024-08-23T23:36:05.09569Z","iopub.status.idle":"2024-08-23T23:36:05.104095Z","shell.execute_reply.started":"2024-08-23T23:36:05.095638Z","shell.execute_reply":"2024-08-23T23:36:05.102787Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Classification Report for XGB Model\nprint(classification_report(model_GB.predict(X_test),y_test))","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:05.106401Z","iopub.execute_input":"2024-08-23T23:36:05.106995Z","iopub.status.idle":"2024-08-23T23:36:05.138899Z","shell.execute_reply.started":"2024-08-23T23:36:05.106937Z","shell.execute_reply":"2024-08-23T23:36:05.137096Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Auc Roc Curve\ndef generate_auc_roc_curve(clf, X_test):\n    y_pred_proba = clf.predict_proba(X_test)[:, 1]\n    fpr, tpr, thresholds = roc_curve(y_test,  y_pred_proba)\n    auc = roc_auc_score(y_test, y_pred_proba)\n    plt.plot(fpr,tpr,label=\"AUC ROC Curve with Area Under the curve =\"+str(auc))\n    plt.legend(loc=4)\n    plt.show()\n    pass","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:05.140848Z","iopub.execute_input":"2024-08-23T23:36:05.141228Z","iopub.status.idle":"2024-08-23T23:36:05.152969Z","shell.execute_reply.started":"2024-08-23T23:36:05.141193Z","shell.execute_reply":"2024-08-23T23:36:05.150877Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"generate_auc_roc_curve(model_GB, X_test)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:05.154966Z","iopub.execute_input":"2024-08-23T23:36:05.155504Z","iopub.status.idle":"2024-08-23T23:36:05.402142Z","shell.execute_reply.started":"2024-08-23T23:36:05.155448Z","shell.execute_reply":"2024-08-23T23:36:05.40086Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# 4- Model Tuning","metadata":{}},{"cell_type":"code","source":"# LightGBM: \nlgb_model = LGBMClassifier()\n# Model Tuning\nlgbm_params = {'colsample_bytree': 0.5,\n 'learning_rate': 0.01,\n 'max_depth': 6,\n 'n_estimators': 500}\n\nlgbm_tuned = LGBMClassifier(**lgbm_params).fit(X, y)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:05.403998Z","iopub.execute_input":"2024-08-23T23:36:05.404412Z","iopub.status.idle":"2024-08-23T23:36:06.177102Z","shell.execute_reply.started":"2024-08-23T23:36:05.404369Z","shell.execute_reply":"2024-08-23T23:36:06.175769Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#Let's choose the highest 4 models\n# GBM\ngbm_model = GradientBoostingClassifier()\n# Model Tuning\ngbm_params = {'learning_rate': 0.1, 'max_depth': 3, 'n_estimators': 200, 'subsample': 1}\ngbm_tuned = GradientBoostingClassifier(**gbm_params).fit(X,y)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:06.17927Z","iopub.execute_input":"2024-08-23T23:36:06.180202Z","iopub.status.idle":"2024-08-23T23:36:10.190876Z","shell.execute_reply.started":"2024-08-23T23:36:06.180131Z","shell.execute_reply":"2024-08-23T23:36:10.189348Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# evaluate each model in turn\nmodels = [(\"LightGBM\", lgbm_tuned),\n          (\"GB\",gbm_tuned)]\nresults = []\nnames = []\nfor name, model in models:\n    kfold = KFold(n_splits=10, random_state=123456)\n    cv_results = cross_val_score(model, X, y, cv=10, scoring=\"accuracy\")\n    results.append(cv_results)\n    names.append(name)\n    msg = \"%s: %f (%f)\" % (name, cv_results.mean(), cv_results.std())\n    print(msg)","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:10.193256Z","iopub.execute_input":"2024-08-23T23:36:10.19371Z","iopub.status.idle":"2024-08-23T23:36:55.45309Z","shell.execute_reply.started":"2024-08-23T23:36:10.193666Z","shell.execute_reply":"2024-08-23T23:36:55.451538Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for name, model in models:\n        base = model.fit(X_train,y_train)\n        y_pred = base.predict(X_test)\n        acc_score = accuracy_score(y_test, y_pred)\n        feature_imp = pd.Series(base.feature_importances_,\n                        index=X.columns).sort_values(ascending=False)\n\n        sns.barplot(x=feature_imp, y=feature_imp.index)\n        plt.xlabel('Değişken Önem Skorları')\n        plt.ylabel('Değişkenler')\n        plt.title(name)\n        plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-23T23:36:55.455447Z","iopub.execute_input":"2024-08-23T23:36:55.455897Z","iopub.status.idle":"2024-08-23T23:37:00.172664Z","shell.execute_reply.started":"2024-08-23T23:36:55.455859Z","shell.execute_reply":"2024-08-23T23:37:00.171323Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Report\n\n1) Churn Data Set read.\n\n2) With Exploratory Data Analysis\n\n4) During Model Buildingost\n\n5) The model created as a result of LightGBM hyperparameter optimization (AUC 0.87)","metadata":{}}]}